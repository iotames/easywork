# .gitlab-ci.yml
# https://docs.gitlab.com/ci/quick_start/tutorial/
# TODO 应该传递一个环境变量文件给服务器里的脚本使用。如：${REMOTE_ENV_FILE} /home/yourname/erp/.env
stages:
  # - build
  - test
  - deploy

# build-job:
#   stage: build
#   script:
# # 重新初始化已存在的 Git 仓库于 /home/santic/builds/t2_cuRWBe/0/santic/santic_erp_odoo/.git/
#     - pwd && ls /home/santic/builds/t2_cuRWBe/0/santic/santic_erp_odoo
#     - echo "Triggered by any. ${REMOTE_DEBUG_SCRIPT_FILE}. CI_PIPELINE_SOURCE(${CI_PIPELINE_SOURCE}), CI_COMMIT_BRANCH(${CI_COMMIT_BRANCH}), CI_DEFAULT_BRANCH(${CI_DEFAULT_BRANCH}), CI_COMMIT_AUTHOR(${CI_COMMIT_AUTHOR}), CI_COMMIT_TITLE(${CI_COMMIT_TITLE}), CI_COMMIT_MESSAGE(${CI_COMMIT_MESSAGE}), CI_COMMIT_DESCRIPTION(${CI_COMMIT_DESCRIPTION}), CI_MERGE_REQUEST_EVENT_TYPE(${CI_MERGE_REQUEST_EVENT_TYPE}), CI_MERGE_REQUEST_TARGET_BRANCH_NAME(${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}), CI_MERGE_REQUEST_TITLE(${CI_MERGE_REQUEST_TITLE}), CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
#     - /bin/bash ${REMOTE_DEBUG_SCRIPT_FILE} build-job "${CI_COMMIT_BRANCH}" "${CI_COMMIT_TITLE}" "${CI_COMMIT_MESSAGE}"
#     - ssh ${SSH_ALIAS} "sg crontab -c '${REMOTE_DEBUG_SCRIPT_FILE} build-job \"${CI_COMMIT_BRANCH}\" \"${CI_COMMIT_TITLE}\" \"${CI_COMMIT_MESSAGE}\"'"

# 提交合并请求。合并通过之前。CI_COMMIT_BRANCH 为空
# CI_PIPELINE_SOURCE:merge_request_event, CI_MERGE_REQUEST_EVENT_TYPE(detached)
# CI_MERGE_REQUEST_TARGET_BRANCH_NAME(dev), CI_MERGE_REQUEST_TITLE(更新README.md文件，升级容器化快速部署流程。)
test-job:
  stage: test
  script:
    - pwd
    - echo "Triggered by any to dev branch. ${REMOTE_SCRIPT_FILE}. CI_PIPELINE_SOURCE(${CI_PIPELINE_SOURCE}), CI_DEFAULT_BRANCH(${CI_DEFAULT_BRANCH}), CI_MERGE_REQUEST_EVENT_TYPE(${CI_MERGE_REQUEST_EVENT_TYPE}), CI_MERGE_REQUEST_TARGET_BRANCH_NAME(${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}), CI_MERGE_REQUEST_TITLE(${CI_MERGE_REQUEST_TITLE}), CI_COMMIT_BRANCH(${CI_COMMIT_BRANCH}), CI_COMMIT_AUTHOR(${CI_COMMIT_AUTHOR}), CI_COMMIT_TITLE(${CI_COMMIT_TITLE}), CI_COMMIT_MESSAGE(${CI_COMMIT_MESSAGE}), CI_COMMIT_DESCRIPTION(${CI_COMMIT_DESCRIPTION}), CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
    - ${REMOTE_SCRIPT_FILE} test "${CI_COMMIT_BRANCH}" "${CI_COMMIT_AUTHOR}" "${CI_COMMIT_DESCRIPTION}"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# 情况1：主分支接受合并请求时触发
merge_to_dev_job:
  stage: deploy
  dependencies:
    # - build-job
    - test-job
  script:
    - pwd
    - echo "Triggered by merged to dev branch. ${REMOTE_SCRIPT_FILE}. CI_PIPELINE_SOURCE:${CI_PIPELINE_SOURCE}, CI_MERGE_REQUEST_EVENT_TYPE(${CI_MERGE_REQUEST_EVENT_TYPE}), CI_MERGE_REQUEST_TARGET_BRANCH_NAME(${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}), CI_MERGE_REQUEST_TITLE(${CI_MERGE_REQUEST_TITLE}), CI_MERGE_REQUEST_DESCRIPTION(${CI_MERGE_REQUEST_DESCRIPTION}), CI_COMMIT_BRANCH(${CI_COMMIT_BRANCH}), CI_COMMIT_AUTHOR(${CI_COMMIT_AUTHOR}), CI_COMMIT_TITLE(${CI_COMMIT_TITLE}), CI_COMMIT_MESSAGE(${CI_COMMIT_MESSAGE}), CI_COMMIT_DESCRIPTION(${CI_COMMIT_DESCRIPTION}), CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
    - ${REMOTE_SCRIPT_FILE} deploy_merge "$CI_COMMIT_BRANCH" "$CI_COMMIT_TITLE" "$CI_COMMIT_MESSAGE"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    # - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# 情况2：打新tag时触发
# git tag v0.1.0 -m "这个是CI_COMMIT_TAG_MESSAGE"
# git push --tags 时，${CI_COMMIT_BRANCH} 为空
deploy_on_tag:
  stage: deploy
  dependencies:
    # - build-job
    - test-job
  script:
    - pwd
    - echo "Triggered by new tag. ${REMOTE_SCRIPT_FILE}. CI_PIPELINE_SOURCE:${CI_PIPELINE_SOURCE}, CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
    - ${REMOTE_SCRIPT_FILE} deploy_tag "${CI_COMMIT_TAG}" "${CI_COMMIT_TAG_MESSAGE}" "$CI_COMMIT_AUTHOR"
  rules:
    - if: '$CI_COMMIT_TAG != null'
