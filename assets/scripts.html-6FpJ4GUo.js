import{_ as n,c as a,e,o as t}from"./app-D3rUnszu.js";const i={};function l(p,s){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="运行脚本任务" tabindex="-1"><a class="header-anchor" href="#运行脚本任务"><span>运行脚本任务</span></a></h2><ul><li>https://kestra.io/docs/tutorial/scripts</li></ul><p>在隔离的 Docker 容器中运行自定义 Python、R、Julia、Node.js、Shell 脚本等。</p><ul><li>运行 Python、Node.js、R、Julia、Bash 等的脚本任务</li><li>运行数据摄取同步的 Singer 任务</li><li>运行 DBT 作业的 DBT 任务</li></ul><h2 id="配置taskrunner" tabindex="-1"><a class="header-anchor" href="#配置taskrunner"><span>配置taskRunner</span></a></h2><p>要在 Docker 容器中运行任务，必须给任务设置 <code>taskRunner</code> 配置项。</p><p>每个脚本任务（例如 Python、R、Julia、Node.js 和 Shell）的任务文档提供了有关可用 taskRunner 属性的更多详细信息。</p><ul><li>https://kestra.io/plugins/plugin-script-python/io.kestra.plugin.scripts.python.script</li><li>https://kestra.io/plugins/plugin-script-shell/io.kestra.plugin.scripts.shell.script</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">id</span><span class="token punctuation">:</span> private_docker_image</span>
<span class="line"><span class="token key atrule">namespace</span><span class="token punctuation">:</span> company.team</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">tasks</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> custom_image</span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> io.kestra.plugin.scripts.python.Script</span>
<span class="line">    <span class="token key atrule">taskRunner</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">type</span><span class="token punctuation">:</span> io.kestra.plugin.scripts.runner.docker.Docker</span>
<span class="line">      <span class="token key atrule">credentials</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">username</span><span class="token punctuation">:</span> your_username</span>
<span class="line">        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;{{ secret(&#39;GITHUB_ACCESS_TOKEN&#39;) }}&quot;</span></span>
<span class="line">    <span class="token key atrule">containerImage</span><span class="token punctuation">:</span> ghcr.io/your_org/your_package<span class="token punctuation">:</span>tag</span>
<span class="line">    <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">        print(&quot;this runs using a private container image&quot;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)])])}const r=n(i,[["render",l]]),o=JSON.parse('{"path":"/devops/kestra/scripts.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1751616128000,"contributors":[{"name":"Hankin","username":"Hankin","email":"whq78164@gmail.com","commits":1,"url":"https://github.com/Hankin"}],"changelog":[{"hash":"cd555a58414909a3498092ad3c0726cc124fa163","time":1751616128000,"email":"whq78164@gmail.com","author":"Hankin","message":"UPDATE kestra"}]},"filePathRelative":"devops/kestra/scripts.md"}');export{r as comp,o as data};
