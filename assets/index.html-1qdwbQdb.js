import{_ as n,c as s,e as a,o as i}from"./app-D3rUnszu.js";const c={};function l(o,e){return i(),s("div",null,[...e[0]||(e[0]=[a(`<h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h2><p>为避免开发环境不一致，导致各种报错。约定环境如下：</p><ol><li><p>Windows 11 专业版 x64 24H2</p></li><li><p>WinLibs UCRT 版本: <a href="https://github.com/brechtsanders/winlibs_mingw/releases/download/15.2.0posix-13.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-15.2.0-mingw-w64ucrt-13.0.0-r2.zip" target="_blank" rel="noopener noreferrer">winlibs-x86_64-posix-seh-gcc-15.2.0-mingw-w64ucrt-13.0.0-r2.zip</a> 开发调试都在Windows11下运行，使用</p></li></ol><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><p>需要安装 <code>gcc</code> 编译工具。</p><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h3><ul><li><p>Windows下的C语言工具链有非常多。如：<code>MinGW-w64</code>, <code>TDM-GCC</code>, <code>WinLibs</code>(MinGW-w64的发行版)，<code>MSYS2</code>(集成MinGW工具链，并提供完整的类 Unix 开发环境)</p></li><li><p><code>推荐</code> <a href="https://winlibs.com/" target="_blank" rel="noopener noreferrer">WinLibs</a>: 下载解压后，将 bin 目录添加到系统 PATH 环境变量中，即可使用。无需复杂的安装和配置过程。</p></li><li><p>提示找不到 <code>make</code> 命令：重命名 <code>mingw32-make.exe</code> 为 <code>make.exe</code> 即可: <code>copy mingw32-make.exe make.exe</code></p></li></ul><p><code>WinLibs</code> 下载链接：</p><ul><li><p><code>推荐</code> UCRT 版本 - 现代 Windows 版本（Win10+）: https://github.com/brechtsanders/winlibs_mingw/releases/download/15.2.0posix-13.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-15.2.0-mingw-w64ucrt-13.0.0-r2.zip</p></li><li><p>MSVCRT 版本 - 更好的旧版 Windows 兼容性：https://github.com/brechtsanders/winlibs_mingw/releases/download/15.2.0posix-13.0.0-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-15.2.0-mingw-w64msvcrt-13.0.0-r1.zip</p></li></ul><p>尽管 GCC 和 MinGW-w64 可以在其他平台（例如 Linux）上使用以生成 Windows 可执行文件，但 <code>WinLibs</code> 项目仅专注于构建可在 Windows 上原生运行的版本。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">apt</span> update</span>
<span class="line"><span class="token function">apt</span> <span class="token function">install</span> gcc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译说明" tabindex="-1"><a class="header-anchor" href="#编译说明"><span>编译说明</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># 清除编译缓存</span></span>
<span class="line"><span class="token function">make</span> clean</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 执行编译命令</span></span>
<span class="line"><span class="token function">make</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Makefile所有命令行前必须是 <code>Tab</code>，不能是空格。</li></ol><p>在 Makefile 中，所有以目标（如 all:、clean:、$(TARGET): 等）开头的规则下方，每一行命令前都必须是Tab，不能是空格，否则会报 <code>missing separator</code> 错误。</p>`,16)])])}const r=n(c,[["render",l]]),p=JSON.parse('{"path":"/clang/","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761562163000,"contributors":[{"name":"Hankin","username":"Hankin","email":"554553400@qq.com","commits":1,"url":"https://github.com/Hankin"}],"changelog":[{"hash":"6b3773be127d2ef0bf686c49b2c90307019fc832","time":1761562163000,"email":"554553400@qq.com","author":"Hankin","message":"ADD clang"}]},"filePathRelative":"clang/README.md"}');export{r as comp,p as data};
