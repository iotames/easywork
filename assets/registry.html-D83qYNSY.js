import{_ as l,c,e as a,a as e,b as n,d as t,w as o,r,o as p}from"./app-D3rUnszu.js";const d={},u={start:"2"};function m(v,s){const i=r("RouteLink");return p(),c("div",null,[s[3]||(s[3]=a(`<h2 id="私有镜像仓库" tabindex="-1"><a class="header-anchor" href="#私有镜像仓库"><span>私有镜像仓库</span></a></h2><h3 id="docker镜像仓库服务端" tabindex="-1"><a class="header-anchor" href="#docker镜像仓库服务端"><span>Docker镜像仓库服务端</span></a></h3><ol><li>方案一：轻量级 <code>registry</code> 镜像仓库服务</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># 服务端</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 1. 下载registry镜像：固定版本标签3.0.0。不使用标签则默认为latest</span></span>
<span class="line"><span class="token function">docker</span> pull registry:3.0.0</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 使用前面下载好的镜像，启动容器实例。</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /opt/images/registry:/var/lib/registry <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-p</span> <span class="token number">9000</span>:5000 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--name</span> myregistry registry:3.0.0</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 查看仓库镜像列表：/v2/_catalog</span></span>
<span class="line"><span class="token function">curl</span> http://127.0.0.1:9000/v2/_catalog</span>
<span class="line"><span class="token comment"># {&quot;repositories&quot;:[&quot;library/postgres&quot;]}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 查看仓库镜像的标签列表：/v2/&lt;image-name&gt;/tags/list</span></span>
<span class="line"><span class="token function">curl</span> http://127.0.0.1:9000/v2/library/postgres/tags/list</span>
<span class="line"><span class="token comment"># {&quot;name&quot;:&quot;library/postgres&quot;,&quot;tags&quot;:[&quot;17.4-bookworm&quot;]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-v</code> 选项可以将本地仓库目录挂载到容器内的 <code>/var/lib/registry</code> 下使用，这样就不会容器被删除后镜像也会随之消失。</li><li>可修改 <code>/etc/hosts</code> 文件，添加域名映射。如：<code>172.16.160.33 mirrors.local</code></li><li>如果把私有仓库添加到 <code>registry-mirrors</code> 列表中，则 <code>docker pull</code> 可省略地址前缀。</li></ul>`,5)),e("ol",u,[e("li",null,[s[1]||(s[1]=n("方案二：企业级 ",-1)),t(i,{to:"/docker/harbor/"},{default:o(()=>[...s[0]||(s[0]=[n("Harbor",-1)])]),_:1}),s[2]||(s[2]=n(" 镜像仓库服务",-1))])]),s[4]||(s[4]=a(`<h3 id="docker客户端拉取镜像" tabindex="-1"><a class="header-anchor" href="#docker客户端拉取镜像"><span>Docker客户端拉取镜像</span></a></h3><ol><li>配置示例： <code>/etc/docker/daemon.json</code> 配置文件</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span> </span>
<span class="line">    <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;172.16.160.33:9000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;http://172.16.160.33:9000&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用示例：</li></ol><p>postgres, registry 等官方镜像，在私有仓库中，推荐添加 <code>library/</code> 前缀</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># 客户端</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 1. 定义私有仓库地址。使之可以使用http协议</span></span>
<span class="line"><span class="token function">vim</span> /etc/docker/daemon.json</span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;172.16.160.33:9000&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 重载配置。使上面的配置立即生效</span></span>
<span class="line"><span class="token comment"># systemctl restart docker.service</span></span>
<span class="line">systemctl daemon-reload</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 在本地标记待上传的镜像。两个镜像标签最好保持一致，也就是冒号:后面的部分。</span></span>
<span class="line"><span class="token function">docker</span> tag postgres:17.4-bookworm <span class="token number">172.16</span>.160.33:9000/library/postgres:17.4-bookworm</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 上传做标记的镜像</span></span>
<span class="line"><span class="token function">docker</span> push <span class="token number">172.16</span>.160.33:9000/library/postgres:17.4-bookworm</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 拉取镜像</span></span>
<span class="line"><span class="token function">docker</span> pull <span class="token number">172.16</span>.160.33:9000/library/postgres:17.4-bookworm</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中心镜像仓库" tabindex="-1"><a class="header-anchor" href="#中心镜像仓库"><span>中心镜像仓库</span></a></h2><ol><li>进入 <code>Docker Hub</code> 首先注册一个账号：https://hub.docker.com</li><li>本地登录绑定Docker Hub账号：<code>docker login</code></li><li>登录容器变更实例：<code>docker run -it yourcontainer bash</code></li><li>前面一波操作更改容器后，通过容器ID创建新镜像：<code>docker commit b3f9427a5039 hankin/mypy:v2</code></li><li>查看镜像信息：<code>docker inspect hankin/mypy:v2</code></li><li>将镜像推送至Docker Hub：<code>docker push hankin/mypy:v2</code></li><li>退出登录：<code>docker logout</code></li></ol><ul><li>登录Harbor或其他仓库地址：</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">docker login registry.tencent.com</span>
<span class="line">docker login 172.16.160.33:9000</span>
<span class="line">docker login --username=hi34201496@aliyun.com registry.cn-hangzhou.aliyuncs.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从ID为 <code>b3f9427a5039</code> 的容器创建镜像 <code>hankin/mypy:v2</code></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">docker commit -m=&quot;some update&quot; --author=&quot;hankin&quot; b3f9427a5039 hankin/mypy:v2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用 <code>tag</code> 命令变更ID为 <code>37bb9c63c8b2</code> 的镜像标签，然后推送到新的私有地址</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">docker tag 37bb9c63c8b2 172.16.160.33:9000/hankin/mypy:v2</span>
<span class="line">docker push 172.16.160.33:9000/hankin/mypy:v2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>docker images</code> 查看所有镜像。可获取镜像名，镜像标签，镜像ID等信息。</li><li><code>REPOSITORY</code>: 镜像名。包含镜像仓库地址和镜像在仓库中的路径。镜像仓库地址可以是域名或IP。如果省略地址，则默认为官方镜像仓库。</li><li><code>TAG</code>: 镜像标签。镜像内容有变更，使用镜像标签，标记新版本。</li><li><code>IMAGE ID</code>: 镜像ID。同一个镜像，传送到不同地址的镜像仓库，它们的镜像ID是一样的。</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">REPOSITORY                                            TAG             IMAGE ID       CREATED         SIZE</span>
<span class="line">ubuntu                                                jammy           cc934a90cd99   7 weeks ago     77.9MB</span>
<span class="line">registry                                              3.0.0           3dec7d02aaea   7 weeks ago     57.7MB</span>
<span class="line">192.168.2.101:6000/library/postgres                   17.4-bookworm   f49abb9855df   3 months ago    438MB</span>
<span class="line">postgres                                              17.4-bookworm   f49abb9855df   3 months ago    438MB</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16))])}const k=l(d,[["render",m]]),g=JSON.parse('{"path":"/docker/registry.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761119456000,"contributors":[{"name":"hankin","username":"hankin","email":"whq78164@qq.com","commits":1,"url":"https://github.com/hankin"},{"name":"Hankin","username":"Hankin","email":"hankin@catmes.com","commits":4,"url":"https://github.com/Hankin"}],"changelog":[{"hash":"62079290ad802de05ab18f668bd4339e7e298257","time":1761119456000,"email":"554553400@qq.com","author":"Hankin","message":"UPDATE docker/registry.md"},{"hash":"17d0a18cb1e7c76ad94b69f523872c9d6e37a375","time":1760193362000,"email":"hankin@catmes.com","author":"Hankin","message":"UPDATE Nexus"},{"hash":"9050ff3d6218227a004a1d381d9dcb0fd7980e71","time":1748797129000,"email":"hankin@catmes.com","author":"Hankin","message":"UPDATE nodejs: nvm, n8n. docker: proxy registry volumes"},{"hash":"962828e915fbc9197b9cb4f6f8a65cc8efbf16ac","time":1748783402000,"email":"hankin@catmes.com","author":"Hankin","message":"UPDATE docker"},{"hash":"b1088144853b3582849339de1691bc8427006d67","time":1745855061000,"email":"whq78164@qq.com","author":"hankin","message":"first commit"}]},"filePathRelative":"docker/registry.md"}');export{k as comp,g as data};
