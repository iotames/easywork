import{_ as a,c as n,e as s,o as l}from"./app-Br-LFPki.js";const i={};function t(d,e){return l(),n("div",null,[...e[0]||(e[0]=[s('<h2 id="查看表索引" tabindex="-1"><a class="header-anchor" href="#查看表索引"><span>查看表索引</span></a></h2><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql"><pre><code class="language-mysql"><span class="line">    show index from `table_name`;</span>\n<span class="line">    SHOW keys FROM `table_name`;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Table 表的名称。 Non_unique 如果索引不能包括重复词，则为0。如果可以，则为1。 Key_name 索引的名称。 Seq_in_index 索引中的列序列号，从1开始。 Column_name 列名称。 Collation 列以什么方式存储在索引中。在MySQL中，有值‘A&#39;（升序）或NULL（无分类）。 Cardinality 索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机 会就越大。 Sub_part 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。 Packed 指示关键字如何被压缩。如果没有被压缩，则为NULL。 Null 如果列含有NULL，则含有YES。如果没有，则该列含有NO。 Index_type 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。 Comment 更多评注。</p><h2 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引"><span>创建索引</span></a></h2><ol><li>添加PRIMARY KEY（主键索引）</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )</span>\n<span class="line">    alter table yx_marketing_details add index(id);</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加UNIQUE(唯一索引)</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    ALTER TABLE `table_name` ADD UNIQUE `index_name` (`column`);</span>\n<span class="line">    CREATE UNIQUE INDEX `index_name` ON `table_name` (column_list);</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>添加INDEX(普通索引)</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    ALTER TABLE `table_name` ADD INDEX `index_name` (column list);</span>\n<span class="line">    CREATE INDEX `index_name` ON `table_name` (column_list);</span>\n<span class="line">    ALTER TABLE `article` ADD INDEX (`id`,`order_id`);</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>添加FULLTEXT(全文索引)</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    ALTER TABLE `table_name` ADD FULLTEXT ( `column`) </span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="5"><li>添加多列索引</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引"><span>删除索引</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    drop index index_name on table_name ;</span>\n<span class="line">    alter table table_name drop index index_name ;</span>\n<span class="line">    alter table table_name drop primary key ;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改索引" tabindex="-1"><a class="header-anchor" href="#修改索引"><span>修改索引</span></a></h2><p>mysql没有真正意义的修改索引，只有先删除之后再创建新的索引，才可以达到修改的目的， 原因是mysql在创建索引时会对字段建立关系长度等，只有删除后创建新的索引，才能创建新的关系，保证索引的正确性；</p><pre><code>DROP INDEX login_name_index ON user; \nALTER TABLE user ADD UNIQUE login_name_index(login_name);\n</code></pre><p>or CREATE INDEX login_name_index ON user(login_name);</p><h2 id="重建索引" tabindex="-1"><a class="header-anchor" href="#重建索引"><span>重建索引</span></a></h2><pre><code>REPAIR TABLE `table_name` QUICK;\n</code></pre><h2 id="建索引的几大原则" tabindex="-1"><a class="header-anchor" href="#建索引的几大原则"><span>建索引的几大原则</span></a></h2><h3 id="联合索引最左前缀匹配原则" tabindex="-1"><a class="header-anchor" href="#联合索引最左前缀匹配原则"><span>联合索引最左前缀匹配原则</span></a></h3><p>where条件一定要有联合索引的<code>第一个字段</code>。是否走联合索引与where条件的<code>顺序无关</code>，只与字段有关。</p><ol><li><p>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到<code>范围查询</code>(&gt;、&lt;、between、like)就停止匹配。比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p></li><li><p>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p></li><li><p>尽量选择区分度高的列作为索引，区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</p></li><li><p>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)。</p></li><li><p>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p></li></ol><h3 id="尽量避免全表扫描" tabindex="-1"><a class="header-anchor" href="#尽量避免全表扫描"><span>尽量避免全表扫描</span></a></h3><ol><li>尽量避免在 where 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描</li><li>应尽量避免在 where 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则引擎将放弃使用索引而进行全表扫描</li><li>应尽量避免在 where 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</li><li>in 和 not in 也要慎用，否则会导致全表扫描</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">select id from t where num is null可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num=0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>小技巧: 使用 <code>\\G</code> 代替 <code>;</code> 结束一行SQL语句，可使得查询结果横排变<code>竖排</code>。</p><hr><blockquote><p>mysql中建立索引的一些原则 https://www.cnblogs.com/SZLLQ2000/p/9797199.html 一张图彻底搞懂MySQL的 explain https://segmentfault.com/a/1190000021458117?utm_source=tag-newest MySQL索引原理及慢查询优化 https://tech.meituan.com/2014/06/30/mysql-index.html 关于分布范围特别小的字段（比如只有 0,1 这种的）不适合建索引的说法的实践分析 https://mengkang.net/1133.html 从分析Count(ID)慢SQL原因到联合索引的引申扩展比较（图文真实步骤详细） https://blog.csdn.net/wolf_love666/article/details/87986846</p></blockquote>',32)])])}const c=a(i,[["render",t]]),m=JSON.parse('{"path":"/sql/add_index.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1751954448000,"contributors":[{"name":"Hankin","username":"Hankin","email":"whq78164@gmail.com","commits":1,"url":"https://github.com/Hankin"}],"changelog":[{"hash":"a1fa636f7a12c928fae40b34ac10e14ef3033151","time":1751954448000,"email":"whq78164@gmail.com","author":"Hankin","message":"ADD index for SQL"}]},"filePathRelative":"sql/add_index.md"}');export{c as comp,m as data};
